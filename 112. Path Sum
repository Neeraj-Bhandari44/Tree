Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.

A leaf is a node with no children.

 

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true
Explanation: The root-to-leaf path with the target sum is shown.
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: false
Explanation: There are two root-to-leaf paths in the tree:
(1 --> 2): The sum is 3.
(1 --> 3): The sum is 4.
There is no root-to-leaf path with sum = 5.
Example 3:

Input: root = [], targetSum = 0
Output: false




class Solution {
public:
    int sum=0;
    bool pathsum(TreeNode* root, int target, int sum){
        if(root==NULL)return false;
        if(root->left==NULL && root->right==NULL){
            sum+=root->val;
            return sum==target;
        }
        return pathsum(root->left, target, sum+root->val) || pathsum(root->right, target, sum+root->val);
    }
    bool hasPathSum(TreeNode* root, int targetSum) {
      int sum=0;
      return pathsum(root,targetSum, sum);

    }
};
